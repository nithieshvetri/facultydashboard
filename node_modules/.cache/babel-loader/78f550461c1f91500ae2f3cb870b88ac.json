{"ast":null,"code":"var _jsxFileName = \"D:\\\\practice\\\\src\\\\components\\\\Search\\\\MultiRangeSlider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState, useRef } from \"react\";\nimport PropTypes from \"prop-types\"; // import \"../../MultiRangeSlider.css\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MultiRangeSlider = props => {\n  _s();\n\n  const {\n    min,\n    max,\n    onChange,\n    id\n  } = props;\n  const [minVal, setMinVal] = useState(min);\n  const [maxVal, setMaxVal] = useState(max);\n  const minValRef = useRef(min);\n  const maxValRef = useRef(max);\n  const [values, setValues] = useState({\n    min: minValRef,\n    max: maxValRef\n  });\n  const range = useRef(null); // Convert to percentage\n\n  const getPercent = useCallback(value => Math.round((value - min) / (max - min) * 100), [min, max]); // Set width of the range to decrease from the left side\n\n  useEffect(() => {\n    const minPercent = getPercent(minVal);\n    const maxPercent = getPercent(maxValRef.current);\n\n    if (range.current) {\n      range.current.style.left = `${minPercent}%`;\n      range.current.style.width = `${maxPercent - minPercent}%`;\n    }\n\n    setValues(prevState => ({ ...prevState,\n      min: minValRef\n    }));\n  }, [minVal, getPercent]); // Set width of the range to decrease from the right side\n\n  useEffect(() => {\n    const minPercent = getPercent(minValRef.current);\n    const maxPercent = getPercent(maxVal);\n\n    if (range.current) {\n      range.current.style.width = `${maxPercent - minPercent}%`;\n    }\n\n    setValues(prevState => ({ ...prevState,\n      max: maxValRef\n    }));\n  }, [maxVal, getPercent]); // Get min and max values when their state changes\n  // useEffect(() => {\n  //   onChange({ min: minVal, max: maxVal });\n  // }, [minVal, maxVal, onChange]);\n\n  useEffect(() => {\n    // console.log(\"Valuessss\\n\", values)\n    props.list(prop => ({ ...prop,\n      [id]: {\n        min: minValRef,\n        max: maxValRef\n      }\n    }));\n  }, [values]); // console.log(\"min and max\", minValRef, maxValRef);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-input-groups\",\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'space-around'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: props['label']\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      style: {\n        width: '100%',\n        marginTop: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: min,\n        max: max,\n        value: minVal,\n        style: {\n          marginTop: '20px'\n        },\n        onChange: event => {\n          onChange(event.target.className.split(' ').slice(-1).pop(), Number(event.target.value));\n          console.log(event.target.className.split(' ').slice(-1));\n          const value = Math.min(Number(event.target.value), maxVal - props.step);\n          setMinVal(value);\n          minValRef.current = value;\n        },\n        className: `thumb thumb--left ${id}`,\n        style: {\n          zIndex: minVal > max - 100 && \"5\"\n        },\n        step: 0.1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"range\",\n        min: min,\n        max: max,\n        value: maxVal,\n        className: id,\n        onChange: event => {\n          onChange(event.target.className.split(' ').slice(-1).pop(), Number(event.target.value));\n          const value = Math.max(Number(event.target.value), minVal + props.step);\n          setMaxVal(value);\n          maxValRef.current = value;\n        },\n        step: 0.1,\n        className: `thumb thumb--right ${id}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slider\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slider__track\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: range,\n          className: \"slider__range\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slider__left-value\",\n          children: minVal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slider__right-value\",\n          children: maxVal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MultiRangeSlider, \"cVKs64qOMQmFjRDIxyGcI7VFlPg=\");\n\n_c = MultiRangeSlider;\nMultiRangeSlider.propTypes = {\n  min: PropTypes.number.isRequired,\n  max: PropTypes.number.isRequired,\n  onChange: PropTypes.func.isRequired\n};\nexport default MultiRangeSlider;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiRangeSlider\");","map":{"version":3,"sources":["D:/practice/src/components/Search/MultiRangeSlider.js"],"names":["React","useCallback","useEffect","useState","useRef","PropTypes","MultiRangeSlider","props","min","max","onChange","id","minVal","setMinVal","maxVal","setMaxVal","minValRef","maxValRef","values","setValues","range","getPercent","value","Math","round","minPercent","maxPercent","current","style","left","width","prevState","list","prop","display","flexDirection","justifyContent","marginTop","event","target","className","split","slice","pop","Number","console","log","step","zIndex","propTypes","number","isRequired","func"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import \"../../MultiRangeSlider.css\";\r\n\r\nconst MultiRangeSlider = (props) => {\r\n  const { min, max, onChange, id } = props\r\n  const [minVal, setMinVal] = useState(min);\r\n  const [maxVal, setMaxVal] = useState(max);\r\n  const minValRef = useRef(min);\r\n  const maxValRef = useRef(max);\r\n  const [values, setValues] = useState({\r\n    min: minValRef,\r\n    max: maxValRef\r\n  })\r\n  const range = useRef(null);\r\n\r\n  // Convert to percentage\r\n  const getPercent = useCallback(\r\n    (value) => Math.round(((value - min) / (max - min)) * 100),\r\n    [min, max]\r\n  );\r\n\r\n  // Set width of the range to decrease from the left side\r\n  useEffect(() => {\r\n    const minPercent = getPercent(minVal);\r\n    const maxPercent = getPercent(maxValRef.current);\r\n\r\n    if (range.current) {\r\n      range.current.style.left = `${minPercent}%`;\r\n      range.current.style.width = `${maxPercent - minPercent}%`;\r\n    }\r\n    setValues(prevState => ({\r\n      ...prevState,\r\n      min: minValRef\r\n    }))\r\n  }, [minVal, getPercent]);\r\n\r\n  // Set width of the range to decrease from the right side\r\n  useEffect(() => {\r\n    const minPercent = getPercent(minValRef.current);\r\n    const maxPercent = getPercent(maxVal);\r\n\r\n    if (range.current) {\r\n      range.current.style.width = `${maxPercent - minPercent}%`;\r\n    }\r\n    setValues(prevState => ({\r\n      ...prevState,\r\n      max: maxValRef\r\n    }))\r\n  }, [maxVal, getPercent]);\r\n\r\n  // Get min and max values when their state changes\r\n  // useEffect(() => {\r\n  //   onChange({ min: minVal, max: maxVal });\r\n  // }, [minVal, maxVal, onChange]);\r\n\r\n  useEffect(()=>{\r\n    // console.log(\"Valuessss\\n\", values)\r\n    props.list(prop=> ({\r\n      ...prop,\r\n      [id]:  {min: minValRef, max: maxValRef}\r\n    }))\r\n  }, [values])\r\n  // console.log(\"min and max\", minValRef, maxValRef);\r\n  return (\r\n    \r\n    <div className=\"search-input-groups\" style={{ display: 'flex', flexDirection: 'column', justifyContent:'space-around'}} >\r\n      <label>{props['label']}</label>\r\n    <div className=\"container\" style={{width: '100%', marginTop: '10px'}} >\r\n      <input\r\n        type=\"range\"\r\n        min={min}\r\n        max={max}\r\n        value={minVal}\r\n        style={{marginTop: '20px'}}\r\n        onChange={(event) => {\r\n          onChange(event.target.className.split(' ').slice(-1).pop(), Number(event.target.value))\r\n          console.log(event.target.className.split(' ').slice(-1))\r\n          const value = Math.min(Number(event.target.value), maxVal - props.step);\r\n          setMinVal(value);\r\n          minValRef.current = value;\r\n        }}\r\n        className={`thumb thumb--left ${id}`}\r\n        style={{ zIndex: minVal > max - 100 && \"5\" }}\r\n        step= {0.1}\r\n      />\r\n      <input\r\n        type=\"range\"\r\n        min={min}\r\n        max={max}\r\n        value={maxVal}\r\n        className={id}\r\n        onChange={(event) => {\r\n          onChange(event.target.className.split(' ').slice(-1).pop(), Number(event.target.value))\r\n\r\n          const value = Math.max(Number(event.target.value), minVal + props.step);\r\n          setMaxVal(value);\r\n          maxValRef.current = value;\r\n        }}\r\n        step= {0.1}\r\n        className={`thumb thumb--right ${id}`}\r\n\r\n      />\r\n\r\n      <div className=\"slider\">\r\n        <div className=\"slider__track\" />\r\n        <div ref={range} className=\"slider__range\" />\r\n        <div className=\"slider__left-value\">{minVal}</div>\r\n        <div className=\"slider__right-value\">{maxVal}</div>\r\n      </div>\r\n    </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nMultiRangeSlider.propTypes = {\r\n  min: PropTypes.number.isRequired,\r\n  max: PropTypes.number.isRequired,\r\n  onChange: PropTypes.func.isRequired\r\n};\r\n\r\nexport default MultiRangeSlider;\r\n"]},"metadata":{},"sourceType":"module"}